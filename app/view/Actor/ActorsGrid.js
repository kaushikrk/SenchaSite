/*
 * File: app/view/Actor/ActorsGrid.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CBS.view.Actor.ActorsGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.actorsGrid',

    requires: [
        'CBS.view.Actor.ActorsGridViewModel',
        'Ext.view.Table',
        'Ext.grid.filters.Filters',
        'Ext.grid.column.Action',
        'Ext.selection.RowModel'
    ],

    viewModel: {
        type: 'actor.actorsgrid'
    },
    height: 500,
    itemId: 'actorsGrid',
    padding: '10px',
    scrollable: true,
    title: 'Actors list',

    bind: {
        store: '{actorModels}'
    },
    plugins: [
        {
            ptype: 'gridfilters'
        }
    ],
    columns: [
        {
            xtype: 'gridcolumn',
            dataIndex: 'actorId',
            text: 'ID'
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return '<img src="'+value+'" class="thumbnail-img">';
            },
            dataIndex: 'actorPhoto',
            text: 'Actor Photo'
        },
        {
            xtype: 'gridcolumn',
            flex: 1,
            dataIndex: 'actorName',
            text: 'Actor Name'
        },
        {
            xtype: 'gridcolumn',
            flex: 1,
            dataIndex: 'actorGender',
            text: 'Actor Gender'
        },
        {
            xtype: 'gridcolumn',
            flex: 1,
            dataIndex: 'actorAge',
            text: 'Actor Age'
        },
        {
            xtype: 'gridcolumn',
            flex: 1,
            dataIndex: 'workProfile',
            text: 'Work Profile'
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                var me=this;
                var rating=me.setRating(3);
                return rating;
            },
            text: 'Rating'
        },
        {
            xtype: 'actioncolumn',
            text: 'Details',
            items: [
                {
                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                        var mc=Ext.first('#mainContainer');
                        var actor=Ext.create({
                            xtype:'actorDetails',
                            title:record.get('actorName')+' Info'
                        });
                        actor.getViewModel().set('actor',record.data);
                        mc.suspendLayouts();
                        mc.removeAll();
                        mc.add(actor);
                        mc.resumeLayouts(true);
                    },
                    icon: 'resources/images/details.jpeg'
                }
            ]
        }
    ],
    selModel: {
        selType: 'rowmodel',
        allowDeselect: true,
        mode: 'SINGLE'
    },

    setRating: function(rating) {
        html='';
        var clickFunction=this.getRating;
        for(i=0;i<rating;i++){
            html+='<span class="fa fa-star checked" onclick=></span>';
        }
        return html;
    }

});